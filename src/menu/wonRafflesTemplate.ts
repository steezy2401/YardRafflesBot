import { MenuTemplate, createBackMainMenuButtons } from 'telegraf-inline-menu'
import { SessionContext } from '../context/context'
import { RafflesModel } from '../models/rafflesModel'
import { dateFormatter, isDateExpired } from '../utils/dateHelper'
import { QRCodeGen } from '../utils/qrCodeGenerator'

const rafflesModel = new RafflesModel()
const QRCodeModel = new QRCodeGen()

const ENTRIES_PER_PAGE = 4

async function getAllEntries(context: SessionContext) {
  // Getting active raffles list
  const raffles = await rafflesModel.getWonRaffles(context.from?.id!)

  const entries: Record<string, string> = {}

  // Generating entries
  for (const [key, value] of Object.entries(raffles)) {
    let raffle = value
    entries['id' + raffle.id] = raffle.work_name
  }

  return entries
}

async function getButtonEntries(context: SessionContext) {
  // Getting active raffles list
  const raffles = await rafflesModel.getWonRaffles(context.from?.id!)

  const entries: Record<string, string> = {}

  // Generating entries
  for (const [key, value] of Object.entries(raffles)) {
    let raffle = value
    if (!raffle.closed) entries['id' + raffle.id] = raffle.work_name
  }

  return entries
}

// Generating menu body
async function menuBody(context: SessionContext): Promise<string> {
  const raffles = await rafflesModel.getWonRaffles(context.from?.id!)

  // If no active raffles
  if (Object.keys(raffles).length == 0) {
    return '*–í—ã –µ—â–µ –Ω–µ –ø–æ–±–µ–¥–∏–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∞—Ñ—Ñ–ª–µ*'
  }

  const allEntries = await getAllEntries(context)

  if (context.session.wonRafflesPage === undefined || Math.ceil(Object.keys(allEntries).length / ENTRIES_PER_PAGE) < context.session.wonRafflesPage) {
    context.session.wonRafflesPage = 1
  }

  const rafflesObj = raffles
  const pageIndex = (context.session.wonRafflesPage ?? 1) - 1

  rafflesObj.length = Object.keys(allEntries).length;
  const currentPageEntries = Array.prototype.slice.call(rafflesObj, pageIndex * ENTRIES_PER_PAGE, (pageIndex + 1) * ENTRIES_PER_PAGE);


  let text = `[[${pageIndex + 1}/${Math.ceil(Object.keys(allEntries).length / ENTRIES_PER_PAGE)}]]\n` // Page number
  text += '*–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Ñ—Ñ–ª—ã*\n_(–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏)_\n\n'

  for (const [key, value] of Object.entries(currentPageEntries)) {
    text += `üîπ*${value.work_name}*\n`
    text += `_–î–æ—Ö–æ–¥:_ ${value.profit !== '' ? value.profit + '‚ÇΩ' : '–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è'}\n`
    text += `_–ó–∞–≤–µ—Ä—à–µ–Ω:_ ${dateFormatter(value.close_date)}\n`
    text += `_–°—Ç–∞—Ç—É—Å:_ ${value.closed === 1 ? '`–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞`' : '`–û–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏`'}\n`
    text += `\n`
  }

  return text
}

const wonRafflesTemplate = new MenuTemplate<SessionContext>(async context => {
  return { text: await menuBody(context), parse_mode: 'Markdown' }
})


const detailsMenuTemplate = new MenuTemplate<SessionContext>(async ctx => {
  // Getting raffle id
  const id = parseInt(ctx.match![1].slice(2))

  // Setting current opened raffle id into session
  ctx.session.currentRafflesId = id

  // Getting raffle via API
  const raffle = await rafflesModel.getRaffle(id, ctx.from?.id!)

  ctx.session.currentRafflesStatus = raffle.userStatus ? true : false

  const QRCode = await QRCodeModel.makeSuccessQRCode(raffle.successHash)

  let text = `*QR –∫–æ–¥*`

  return {
    type: 'photo',
    media: {
      source: Buffer.from(QRCode, 'base64')
    },
    text,
    parse_mode: 'Markdown'
  }

})

// Adding entries menu
wonRafflesTemplate.chooseIntoSubmenu('details', getButtonEntries, detailsMenuTemplate, {
  maxRows: 2,
  columns: ENTRIES_PER_PAGE / 2,
  getCurrentPage: context => context.session.wonRafflesPage
})


detailsMenuTemplate.manualRow(createBackMainMenuButtons('üîô –ù–∞–∑–∞–¥', ''))

// Pagination buttons
async function getCustomPaginationButtons(context: any) {
  const allEntries = await getAllEntries(context)

  if (Object.keys(allEntries).length === 0 || Object.keys(allEntries).length <= ENTRIES_PER_PAGE) {
    return []
  }

  if (context.session.wonRafflesPage === 1) {
    return [[{ text: '‚ñ∂Ô∏è', relativePath: `custom-pagination:${context.session.wonRafflesPage + 1}` }]]
  }
  if (context.session.wonRafflesPage === Math.ceil(Object.keys(allEntries).length / ENTRIES_PER_PAGE)) {
    return [[{ text: '‚óÄÔ∏è', relativePath: `custom-pagination:${context.session.wonRafflesPage - 1}` }]]
  }
  return [[{ text: '‚óÄÔ∏è', relativePath: `custom-pagination:${context.session.wonRafflesPage - 1}` }, { text: '‚ñ∂Ô∏è', relativePath: `custom-pagination:${context.session.wonRafflesPage + 1}` }]]
}

// Custom pagination
wonRafflesTemplate.manualRow(getCustomPaginationButtons)
wonRafflesTemplate.manualAction(/custom-pagination:(\d+)$/, (context, path) => {
  context.session.wonRafflesPage = parseInt(context.match![1])
  return '.'
})


wonRafflesTemplate.manualRow(createBackMainMenuButtons('üîô –ù–∞–∑–∞–¥', ''))

export { wonRafflesTemplate }