import { Composer, Scenes, Markup } from 'telegraf'
import { isValidPhoneNumber, parsePhoneNumber } from 'libphonenumber-js'
import { SessionContext } from '../context/context'
import { keyboard } from '../keyboard'
import { template } from '../utils/templater'
import { UserModel } from '../models/userModel'

const userModel = new UserModel()

const getPhoneNumberStep = new Composer<SessionContext>()
getPhoneNumberStep.on('text', async (ctx) => {
  // –ü–æ–ª—É—á–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  const phone = ctx.message.text
  const phoneNumber = parsePhoneNumber(phone, 'RU')

  if (!isValidPhoneNumber(phone, 'RU')) {
    ctx.reply('‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚ùóÔ∏è')
    await ctx.reply('üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
    return
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î
  const phoneExists = await userModel.checkPhoneNumber(phoneNumber.number.toString())
  if (phoneExists) {
    ctx.reply('‚ùóÔ∏è–¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω‚ùóÔ∏è')
    await ctx.reply('üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
    return
  }

  const user = await userModel.addUser({
    telegramId: ctx.from.id,
    username: ctx.from.first_name,
    telegramLink: ctx.from.username,
    phone: phoneNumber.number.toString()
  })

  if (user === {}) {
    ctx.reply('‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚ùóÔ∏è')
    ctx.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–Ω–æ–≤–∞...')
    return
  }

  // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ —Å–æ–æ–±—â–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', Markup
    .keyboard(keyboard.home)
    .oneTime()
    .resize())
  return await ctx.scene.leave()
})
getPhoneNumberStep.use((ctx) =>
  ctx.replyWithMarkdown('üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
)

export const authWizard = new Scenes.WizardScene(
  'auth-wizard',
  async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const userExists = await userModel.checkUserExists(ctx.from?.id!)

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    if (userExists) {
      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, ${ctx.from!.first_name}`, Markup
        .keyboard(keyboard.home)
        .oneTime()
        .resize())
      return await ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –ø–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const text = template('welcome', 'unregistered_wellcome', {
      username: ctx.from!.first_name
    })
    await ctx.reply(text, Markup.removeKeyboard())
    await ctx.reply('üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
    return ctx.wizard.next()
  },
  getPhoneNumberStep
)